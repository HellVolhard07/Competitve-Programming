#include <iostream>

#define int long long
#define endl "\n"

using namespace std;

class node {
    
    public:
    int val;
    node* next;
    
    node() {
        this->val = 0;
        this->next = NULL;
    }
    
    node(int x) {
        this->val = x;
        this->next = NULL;
    }
};

node* takeInput() {
    int data;
    cin>>data;
    node* head = NULL;
    node* temp = NULL;
    while(data != -1) {
        node* newNode = new node(data);
        if(head == NULL) {
            head = newNode;
            temp = head;
        }
        else {
            temp -> next = newNode;
            temp = temp -> next;
        }
        cin>>data;
    }
    return head;
}

node* insertNode (node* head, int data, int pos) {
    node* newNode = new node(data);
    node* temp = head;
    int count = 0;
    
    if(pos == 0) {
        newNode -> next = head;
        head = newNode;
        return head;
    }
    
    while(temp != NULL and count < pos - 1) {
        temp = temp -> next;
        count++;
    }
    
    if(temp != NULL) {
    newNode -> next = temp -> next;
    temp -> next = newNode;
    }
    return head;
}

node* delete_ith_node_iterative (node* head, int pos) {
    node* temp = head;
    int count = 0;
    if(pos == 0) {
        head = head -> next;
        delete(temp);
        return head;
    }
    while(temp != NULL and count < pos - 1) {
        temp = temp -> next;
        count++;
    }
    if(temp != NULL) {
        node* del = temp -> next;           // delete(temp -> next)
        temp -> next = temp -> next -> next;
        delete(del);
    }
    return head;
}

node* delete_ith_node_recursive (node* head, int pos) {
    if (pos < 0)
       return head;
 
    if (head == NULL)
       return NULL;
  
    if (pos == 0)
    {
        node* temp = head->next;
        delete(head);
        return temp; 
    }
     
    head->next = delete_ith_node_recursive(head->next, pos-1);
    return head;
}

void print_ith_node_iterative (node* head, int i) {
    while(i >= 0) {
        if(i == 0) {
            cout<<head -> val;
            return;
        }
        else {
            if(head -> next != NULL) {
                head = head -> next;
                i--;
            }
            else {
                return;
            }
        }
    }
}

void print_ith_node_recursive (node* head, int i) {
    if(i == -1) {
        return;
    }
    if(i == 0 and head -> val != NULL) {
        cout<<head->val;
    }
    else {
        if(head -> next != NULL) {
            print_ith_node_recursive(head -> next, i - 1);
        }
        return;
    }
}

void print(node* head) {
    node* temp = head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

void solve() {
    node* head = takeInput();
    print(head);
    head = insertNode(head, 99, 2);
    print(head);
    head = insertNode(head, 2, 0);
    print(head);
    head = delete_ith_node_recursive(head, 0);
    print(head);
    head = delete_ith_node_recursive(head, 3);
    print(head);
    print_ith_node_iterative(head, 2);
    print_ith_node_recursive(head, 2);
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
	return 0;
}
