int solve(int* dp, int n)
{
    if(n <= 1) {
        return n;
    }
    if(dp[n] != -1) {
        return dp[n];
    }
    dp[n - 1] = solve(dp, n - 1);
    dp[n - 2] = solve(dp, n - 2);
    dp[n] = dp[n - 1] + dp[n - 2];
    return dp[n];
}

int createDP(int n) {
    int dp[n + 1] = {-1};
    memset(dp,-1,sizeof(dp));
    return solve(dp, n);
}

int main() {
    int n = 6;
    cout<<createDP(n);
	return 0;
}
