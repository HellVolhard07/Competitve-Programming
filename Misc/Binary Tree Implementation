#include <iostream>
#include <queue>
#include <cmath>

using namespace std;

class node {
    public:
    int data;
    node* left;
    node* right;
    
    node(int data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
    
    ~node() {
        delete left;
        delete right;
    }
};

void printTree(node* root) {
    if(!root) {
        return;
    }
    cout<<root->data<<": ";
    if(root->left) {
        cout<<"L"<<root->left->data;
    }
    if(root->right) {
        cout<<"R"<<root->right->data;
    }
    cout<<endl;
    printTree(root->left);
    printTree(root->right);
}

void printTreeLevelWise(node* root) {
    if(!root) {
        return;
    }
    queue<node*> pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size() != 0) {
        node* front = pendingNodes.front();
        pendingNodes.pop();
        cout<<front->data<<": ";
        if(front->left){
            cout<<"L"<<front->left->data;
            pendingNodes.push(front->left);
        }
        if(front->right) {
            cout<<"R"<<front->right->data;
            pendingNodes.push(front->right);
        }
        cout<<endl;
    }
}

node* takeInput() {
    int rootData;
    //cout<<"Enter data";
    cin>>rootData;
    if(rootData == -1) {
        return NULL;
    }
    node* root = new node(rootData);
    node* leftChild = takeInput();
    node* rightChild = takeInput();
    root->left = leftChild;
    root->right = rightChild;
    return root;
}

node* takeInputLevelWise() {
    int rootData;
    cout<<"Enter root data\n";
    cin>>rootData;
    if(rootData == -1) {
        return NULL;
    }
    node* root = new node(rootData);
    queue<node*> pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size() != 0) {
        node* front = pendingNodes.front();
        pendingNodes.pop();
        cout<<"Enter left child of "<<front->data<<": \n";
        int leftChildData;
        cin>>leftChildData;
        if(leftChildData != -1) {
            node* child = new node(leftChildData);
            front->left = child;
            pendingNodes.push(child);
        }
        cout<<"Enter right child of "<<front->data<<": \n";
        int rightChildData;
        cin>>rightChildData;
        if(rightChildData != -1) {
            node* child = new node(rightChildData);
            front->right = child;
            pendingNodes.push(child);
        }
    }
    return root;
}

int countNodes(node* root) {
    if(!root) {
        return 0;
    }
    return 1 + countNodes(root->left) + countNodes(root->right);
}

bool findNode(node* root, int x) {
    if(!root) {
        return false;
    }
    if(root->data == x) {
        return true;
    }
    bool leftSearch = findNode(root->left, x);
    bool rightSearch = findNode(root->right, x);
    
    return leftSearch || rightSearch;
}

int height(node* root) {
    if(!root) {
        return 0;
    }
    return 1 + max(height(root->left), height(root->right));
}

void mirror(node* root) {
    if(!root) {
        return;
    }
    mirror(root->left);
    mirror(root->right);
    node* temp;
    temp = root->left;
    root->left = root->right;
    root->right = temp;
}

void inorder(node* root) {
    if(!root) {
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

void preorder(node* root) {
    if(!root) {
        return;
    }
    cout<<root->data<<" ";
    inorder(root->left);
    inorder(root->right);
}

void postorder(node* root) {
    if(!root) {
        return;
    }
    inorder(root->left);
    inorder(root->right);
    cout<<root->data<<" ";
}

node* buildTreeHelper(int* in, int* pre, int inS, int inE, int preS, int preE) {
    if(inS > inE) {
        return NULL;
    }
    int rootData = pre[preS];
    int rootIndex = -1;
    for(int i = inS ; i < inE ; i++) {
        if(in[i] == rootData) {
            rootIndex = i;
        }
    }
    int lInS = inS;
    int lInE = rootIndex - 1;
    int lPreS = preS + 1;
    int lPreE = lInE - lInS + lPreS;
    int rInS = rootIndex + 1;
    int rInE = inE;
    int rPreS = lPreE + 1;
    int rPreE = preE;
    node* root = new node(rootData);
    root->left = buildTreeHelper(in, pre, lInS, lInE, lPreS, lPreE);
    root->right = buildTreeHelper(in, pre, rInS, rInE, rPreS, rPreE);
    return root;
}

node* buildTree(int* in, int* pre, int size) {
    return buildTreeHelper(in, pre, 0, size - 1, 0, size -1);
}

int main() {
    int in[] = {4, 2, 5, 1, 8, 6, 9, 3, 7};
    int pre[] = {1, 2, 4, 5, 3, 6, 8, 9, 7};
    node* root = buildTree(in, pre, 9);
    printTreeLevelWise(root);
    
}
